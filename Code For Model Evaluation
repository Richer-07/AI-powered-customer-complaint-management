# 1. Install required libraries (uncomment below if running locally)
# !pip install pandas scikit-learn nltk

# 2. Import libraries
import pandas as pd
import re
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# 3. Download NLTK stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords

# 4. Load dataset
df = pd.read_csv('/content/customer reviews data set - Copy.csv')  # Update this path as needed

# 5. Preprocess text
stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove punctuation/numbers
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words]
    return " ".join(tokens)

df['cleaned_review'] = df['reviewText'].apply(clean_text)

# 6. Drop rows with empty cleaned text
df = df[df['cleaned_review'].str.strip().astype(bool)]

# 7. Create sentiment labels
def rating_to_sentiment(rating):
    if rating >= 4:
        return "Positive"
    elif rating <= 2:
        return "Negative"
    else:
        return "Neutral"

df['Sentiment'] = df['overall'].apply(rating_to_sentiment)

# 8. Optional: Check sentiment distribution
print("Label distribution:\n", df['Sentiment'].value_counts())

# 9. Prepare features and labels
X = df['cleaned_review']
y = df['Sentiment']

# 10. Vectorize text
vectorizer = TfidfVectorizer()
X_vec = vectorizer.fit_transform(X)

# 11. Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_vec, y, test_size=0.2, random_state=42, stratify=y
)

# 12. Train the model with class weight balancing
model = LogisticRegression(class_weight='balanced')
model.fit(X_train, y_train)

print("✅ Model training completed!")

# 13. Chatbot response function with custom messages
def chatbot_response(user_message):
    cleaned = clean_text(user_message)
    if not cleaned.strip():
        return "❗ Sorry, I couldn't understand that. Can you rephrase?"

    vectorized = vectorizer.transform([cleaned])
    prediction = model.predict(vectorized)[0]

    if prediction == "Positive":
        return "😊 Thank you for your kind words!"
    elif prediction == "Negative":
        return "🙁 Sorry for the inconvenience. We’ll make improvements."
    else:
        return "😐 Thanks for your feedback!"

# 14. Start the chatbot
print("\n💬 Chatbot is ready! (type 'exit' or 'quit' to stop)\n")
while True:
    user_input = input("You: ")
    if user_input.lower() in ['exit', 'quit']:
        print("Chatbot: Goodbye! 👋")
        break
    reply = chatbot_response(user_input)
    print(f"Chatbot: {reply}")
